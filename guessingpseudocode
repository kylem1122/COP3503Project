//initial variable "bool previousHit = false"
//if there is a hit set it to true, if it's false set it to false

//run if previousHit = false
procedure searchForHighestNumber
    max = loadedArray(0,0)
    maxIndex = (0,0)
    for i < 10
        for j < 10
            if (loadedArray(i,j) > max)
                max = loadedArray(i,j)
                maxIndex = (i,j)
            else if (loadedArray(i,j) == max)
                if (random T/F) 
                //possibly based on dividing the time by a 2 modulus and receiving 0 or 1?
                //cons of this method would be that we will most likely always start guessing from the bottom right corner
                //open to other suggestions on how to not guess exclusively in the top left or bottom right corners
                    max = loadedArray(i,j)
                    maxIndex = (i,j)
   return maxIndex
   
 //run if previousHit = true
 procedure previousGuessHit (int x,y: previousGuess(x,y))
    max = loadedArray(x,y-1)
    maxIndex = (x,y-1)
    
    if (firstIndex(x,y+1) > max)
        max = loadedArray(x,y+1)
        maxIndex = (x,y+1)
    else if(fistIndex(x,y+1) == max)
        if (random T/f) 
            max = loadedArray(x,y+1)
            maxIndex = (x,y+1)
            
    if (secondIndex(x-1,y) > max)
        max = loadedArray(x-1,y)
        maxIndex = (x-1,y)
    else if(secondIndex(x-1,y) == max)
        if (random T/f) 
            max = loadedArray(x-1,y)
            maxIndex = (x-1,y)
           
    if (thirdIndex(x+1,y) > max)
        max = loadedArray(x+1,y)
        maxIndex = (x+1,y)
    else if(secondIndex(x+1,y) == max)
        if (random T/f) 
            max = loadedArray(x+1,y)
            maxIndex = (x+1,y)
            
    return maxIndex
